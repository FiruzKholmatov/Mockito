package ru.netology;

public class MovieManager() {
    private MovieItem[] items = new MovieItem[10];

    public MovieManager() {
    }

    public MovieManager(MovieItem[] items) {
        this.items = items;
    }




    public void save(MovieItem item) {
        int length = items.length + 1;
        MovieItem[] tmp = new MovieItem[length];
        System.arraycopy(items, 0, tmp, 0, items.length);
        int lastIndex = tmp.length - 1;
        tmp[lastIndex] = item;
        items = tmp;
    }

    public MovieItem[] findAll() {

           MovieItem[] result = new MovieItem[items.length];
        for (int i = 0; i < result.length; i++) {
            int index = items.length - i - 1;
            result[i] = items[index];
        }
        return result;
    }



//    Какие методы должны быть у менеджера?
//
//    Добавить фильм в ленту (класс фильма напишите сами по аналогии с лекции).
//    Выдать последние 10 добавленных фильмов* (фильмы выдаются в обратном порядке, т.е. первым в массиве результатов будет тот, который был добавлен последним).
//    Примечание*: если фильмов меньше 10, то выдаёте столько, сколько есть.
//
//    Сделайте так, чтобы по умолчанию выводилось последние 10 добавленных фильмов, но при создании менеджера можно было указать другое число, чтобы, например, выдавать 5 (а не 10). Т.е. у вас у менеджера 
//    должно быть два конструктора: один без параметров, выставляющий лимит менеджера в 10, а другой с параметром, берущий значение лимита для менеджера из параметра конструктора.
//
//    Метод получения последних фильмов будет очень похож на тот что был в лекции. Основное отличие будет в том, что вам в его начале надо будет вычислить правильный ожидаемый размер результирующего 
//    массива-ответа, а не просто брать длину массива что лежит в поле; сделать это можно заведя целочисленную переменную в которую вы сохраните желаемый размер создаваемого массива, вычислите с помощью
//    условных операторов для неё значение, а затем только создадите массив указав эту переменную как требуемый для него размер, например:


//            ??? resultLength;
//  if ??? {
//        resultLength = ???
//    } else {
//        resultLength = ???
//    }
//  ??? result = new ???[resultLength];
//  for (???) {
//        // заполняем result из массива что лежит в поле
//        // в обратном порядке
//    }



}
